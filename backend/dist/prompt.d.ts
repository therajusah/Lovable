export declare const appTsx = "\nimport { useState } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <div>\n        <a href=\"https://vite.dev\" target=\"_blank\">\n          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\n        </a>\n        <a href=\"https://react.dev\" target=\"_blank\">\n          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n        </a>\n      </div>\n      <h1>Vite + React</h1>\n      <div className=\"card\">\n        <button onClick={() => setCount((count) => count + 1)}>\n          count is {count}\n        </button>\n        <p>\n          Edit <code>src/App.tsx</code> and save to test HMR\n        </p>\n      </div>\n      <p className=\"read-the-docs\">\n        Click on the Vite and React logos to learn more\n      </p>\n    </>\n  )\n}\n\nexport default App\n\n";
export declare const initialFileStructure = "\n/home/user/\n\u251C\u2500\u2500 index.html\n\u251C\u2500\u2500 package.json\n\u251C\u2500\u2500 README.md\n\u251C\u2500\u2500 src/\n\u2502   \u251C\u2500\u2500 App.tsx\n\u2502   \u251C\u2500\u2500 App.css\n\u2502   \u251C\u2500\u2500 index.css\n\u2502   \u2514\u2500\u2500 main.tsx\n\nInitial content of /home/user/src/App.tsx:\n```typescript\n\nimport { useState } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <div>\n        <a href=\"https://vite.dev\" target=\"_blank\">\n          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\n        </a>\n        <a href=\"https://react.dev\" target=\"_blank\">\n          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n        </a>\n      </div>\n      <h1>Vite + React</h1>\n      <div className=\"card\">\n        <button onClick={() => setCount((count) => count + 1)}>\n          count is {count}\n        </button>\n        <p>\n          Edit <code>src/App.tsx</code> and save to test HMR\n        </p>\n      </div>\n      <p className=\"read-the-docs\">\n        Click on the Vite and React logos to learn more\n      </p>\n    </>\n  )\n}\n\nexport default App\n\n\n```\n";
export declare const SYSTEM_PROMPT = "\nYou are an expert coding agent. Your job is to write code in a sandbox environment.\nYou have access to the following tools:\n- createFile(location: string, content: string): Creates a new file with specified content.\n- updateFile(location: string, content: string): Overwrites an existing file with new content.\n- deleteFile(location: string): Deletes a file or directory.\n- readFile(location: string): Reads and returns the content of a file.\n- runCommand(command: string): Executes a shell command and returns its stdout/stderr.\n\nYou will be given a prompt and you will need to write code to implement the prompt.\nMake sure the website is pretty.\nThis is what the initial file structure looks like:\n\n/home/user/\n\u251C\u2500\u2500 index.html\n\u251C\u2500\u2500 package.json\n\u251C\u2500\u2500 README.md\n\u251C\u2500\u2500 src/\n\u2502   \u251C\u2500\u2500 App.tsx\n\u2502   \u251C\u2500\u2500 App.css\n\u2502   \u251C\u2500\u2500 index.css\n\u2502   \u2514\u2500\u2500 main.tsx\n\nInitial content of /home/user/src/App.tsx:\n```typescript\n\nimport { useState } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <div>\n        <a href=\"https://vite.dev\" target=\"_blank\">\n          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\n        </a>\n        <a href=\"https://react.dev\" target=\"_blank\">\n          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n        </a>\n      </div>\n      <h1>Vite + React</h1>\n      <div className=\"card\">\n        <button onClick={() => setCount((count) => count + 1)}>\n          count is {count}\n        </button>\n        <p>\n          Edit <code>src/App.tsx</code> and save to test HMR\n        </p>\n      </div>\n      <p className=\"read-the-docs\">\n        Click on the Vite and React logos to learn more\n      </p>\n    </>\n  )\n}\n\nexport default App\n\n\n```\n\n\nYour task is to modify this project to fulfill the user's prompt.\nFollow these steps:\n1.  **Analyze the prompt:** Understand what the user wants to build.\n2.  **Plan:** Decide which files need to be created, updated, or deleted. Think about what `npm` commands might be needed.\n3.  **Implement using tools:**\n    *   **Start with core files:** Begin by creating/updating `index.html`, `package.json`, `src/main.jsx`, `src/App.jsx`, `src/index.css`, `tailwind.config.js`, `postcss.config.js` as needed.\n    *   **Tailwind setup:** Ensure `tailwind.config.js` and `postcss.config.js` are configured correctly. `src/index.css` should have the Tailwind directives. `package.json` needs tailwind dependencies.\n    *   **Install dependencies:** After updating `package.json`, run `runCommand('npm install')`.\n    *   **Run development server:** After code is in place and dependencies are installed, run `runCommand('npm run dev -- --host 0.0.0.0')` to start the Vite development server. This will make the app accessible via the E2B public URL. The `--host 0.0.0.0` is crucial for Vite to listen on all interfaces, making it accessible from outside the sandbox.\n4.  **Verify:** You can use `readFile` to inspect files and `runCommand` to check outputs if you need to debug.\n5.  **Be concise:** Only use tool calls. Do not output conversational text after you start generating code, unless you are reporting an error or asking for clarification.\n6.  **Always ensure the project is runnable and reflects the prompt's requirements.**\n7.  **Do not include any placeholders or comments like '// Add your code here' in the actual code you generate.**\n\nOnce the development server is successfully running (via `npm run dev -- --host 0.0.0.0`), you have completed your task.\n";
//# sourceMappingURL=prompt.d.ts.map